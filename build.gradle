/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sean' at '7/6/16 7:52 AM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// added manually: sdk
// If we start getting errors about libraries not found, but it builds from
// the command line, do this:
// close eclipse
// remove .project (and .classpath if .project alone doesn't solve it)
// ./gradlew eclipse
// I also ran into a problem where Eclipse forgot this was a Gradle project. I had to
// remove the project from the workspace, re-add it, and let it recreate the .project
// and .classpath files for it to work.
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    // added by sdk
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

	// Additions by me....
	
	// https://mvnrepository.com/artifact/net.sf.supercsv/super-csv
	compile group: 'net.sf.supercsv', name: 'super-csv', version: '2.4.0'

	// https://mvnrepository.com/artifact/org.apache.commons/commons-csv
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
}
